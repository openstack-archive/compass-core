#set controller_role = $get_role('os_compute_controller', $get_role('os_controller', None))

## Contoller node management IP/interface
#set controller_ip = $controller_role.management.ip
#set controller_nic = $controller_role.management.interface

## Compute node management IP/interface
#set compute_role = $get_role('os_compute_worker', None)
#set compute_nic = $compute_role.management.interface

## Network server/worker node IP/interface
#set network = $get_role('os_network', None)
#set network_server_role = $get_role('os_network_server', [$network, $controller_role])
#set network_worker_role = $get_role('os_network_worker', [$network, $compute_role])

#set network_server_ip = $network_server_role.management.ip
#set network_server_nic = $network_server_role.management.interface

## Network worker node management IP/interface
#set network_worker_ip = $network_worker_role.management.ip
#set network_worker_nic = $network_worker_role.management.interface
#set network_worker_public_nic = $network_worker_role.public.interface

## Database node management IP
#set db_role = $get_role('os_ops_database', $controller_role)
#set db_ip = $db_role.management.ip

#def get_role($role_name, $default_roles=None)
    #set target_role = $getVar($role_name, None)
    #if isinstance($target_role, list)
        #if $target_role
            #set target_role = $target_role[0]
        #else
            #set target_role = None
        #end if
    #end if
    #if $target_role is None and $default_roles is not None:
        #if isinstance($default_roles, list)
            #for $role in $default_roles
                #if $role is not None:
                    #set target_role = $role
                    #break
                #end if
            #end for
        #else
            #set target_role = $default_roles
        #end if
    #end if
    #return target_role
#end def

#set credentials = $getVar('service_credentials', {})
{
  "name": "testing",
  "description": "Environment",
  "cookbook_versions": {
  },
  "json_class": "Chef::Environment",
  "chef_type": "environment",
  "default_attributes": {
      "compute": {
          "syslog": {
            "use": false
          },
          "libvirt": {
            "bind_interface": "$compute_nic"
          },
          "novnc_proxy": {
            "bind_interface": "$controller_nic"
          },
          "xvpvnc_proxy": {
            "bind_interface": "eth0"
          }
      },
      "network": {
          "l3": {
              "external_network_bridge_interface": "$network_worker_public_nic"
          }
      },
      "db": {
        "bind_interface": "$controller_nic",
        "compute": {
          "host": "$db_ip"
        },
        "identity": {
          "host": "$db_ip"
        }
      },
      "mq": {
        "user": "$credentials.mq.username",
        "password": "$credentials.mq.password",
        "vhost": "/nova",
        "network": {
          "service_type": "rabbitmq"
        }
      }
    }
}
