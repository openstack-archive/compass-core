#set cluster_name = $getVar('name', '')
#set compute_controllers = $getVar('compute_controller', [])
#set compute_workers = $getVar('compute_worker', [])
#set network_servers = $getVar('network_server', [])
#set network_workers = $getVar('network_worker', [])
#set databases = $getVar('database', [])
#set messagings = $getVar('messaging', [])
#set images = $getVar('image', [])
#set dashboards = $getVar('dashboard', [])
#set identities = $getVar('identity', [])
#set storage_controllers = $getVar('storage_controller', [])
#set storage_volumes = $getVar('storage_volume', [])
#if not $isinstance($compute_controllers, list)
    #set compute_controllers = [$compute_controllers]
#end if
#if not $isinstance($compute_workers, list)
    #set compute_workers = [$compute_workers]
#end if
#if not $isinstance($network_servers, list)
    #set network_servers = [$network_servers]
#end if
#if not $isinstance($network_workers, list)
    #set network_workers = [$network_workers]
#end if
#if not $isinstance($databases, list)
    #set databases = [$databases]
#end if
#if not $isinstance($messagings, list)
    #set messagings = [$messagings]
#end if
#if not $isinstance($images, list)
    #set images = [$images]
#end if
#if not $isinstance($dashboards, list)
    #set dashboards = [$dashboards]
#end if
#if not $isinstance($identities, list)
    #set identities = [$identities]
#end if
#if not $isinstance($storage_controllers, list)
    #set storage_controllers = [$storage_controllers]
#end if
#if not $isinstance($storage_volumes, list)
    #set storage_volumes = [$storage_volumes]
#end if
#for worker in $compute_controllers
    #set worker_ip = $worker.management.ip
compute_controller_host: $worker_ip
#end for
#for worker in $databases
    #set worker_ip = $worker.management.ip
db_host: $worker_ip
#end for
#for worker in $messagings
    #set worker_ip = $worker.management.ip
rabbit_host: $worker_ip
#end for
#for worker in $storage_controllers
    #set worker_ip = $worker.management.ip
storage_controller_host: $worker_ip
#end for
#for worker in $images
    #set worker_ip = $worker.management.ip
image_host: $worker_ip
#end for
#for worker in $identities
    #set worker_ip = $worker.management.ip
identity_host: $worker_ip
#end for
#for worker in $compute_controllers
    #set worker_ip = $worker.management.ip
compute_controller_host: $worker_ip
#end for
#for worker in $network_servers
    #set worker_ip = $worker.management.ip
network_server_host: $worker_ip
#end for
#for worker in $dashboards
    #set worker_ip = $worker.management.ip
dashboard_host: $worker_ip
#end for
#for network in $network_workers
    #set network_external_nic = $network.external.interface
    #set network_internal_nic = $network.management.interface
INTERFACE_NAME: $network_external_nic    
INTERNAL_INTERFACE: $network_internal_nic
#end for

#set credentials = $getVar('service_credentials', {})
#set rabbit_username = $credentials.rabbitmq.username
#set rabbit_password = $credentials.rabbitmq.password

cluster_name: $cluster_name

odl_controller: 10.1.0.15

DEBUG: False
VERBOSE: False
NTP_SERVER_LOCAL: "{{ compute_controller_host }}"
DB_HOST: "{{ db_host }}"
MQ_BROKER: rabbitmq

OPENSTACK_REPO: cloudarchive-juno.list
juno_cloud_archive: deb http://ubuntu-cloud.archive.canonical.com/ubuntu trusty-updates/juno main
ADMIN_TOKEN: admin
CEILOMETER_TOKEN: c095d479023a0fd58a54

RABBIT_PASS: $rabbit_password
KEYSTONE_DBPASS: keystone_db_secret
DEMO_PASS: demo_secret
ADMIN_PASS: admin_secret
GLANCE_DBPASS: glance_db_secret
GLANCE_PASS: glance_secret
NOVA_DBPASS: nova_db_secret
NOVA_PASS: nova_secret
DASH_DBPASS: dash_db_secret
CINDER_DBPASS: cinder_db_secret
CINDER_PASS: cinder_secret
NEUTRON_DBPASS: neutron_db_secret
NEUTRON_PASS: netron_secret
NEUTRON_TYPE_DRIVERS: ['flat', 'gre', 'vxlan']
NEUTRON_TENANT_NETWORK_TYPES: ['vxlan']
#NEUTRON_MECHANISM_DRIVERS: ['opendaylight']
NEUTRON_MECHANISM_DRIVERS: ['openvswitch']
NEUTRON_TUNNEL_TYPES: ['vxlan']
METADATA_SECRET: metadata_secret
INSTANCE_TUNNELS_INTERFACE_IP_ADDRESS: 10.1.1.21

EXTERNAL_NETWORK_CIDR: 203.0.113.0/24
EXTERNAL_NETWORK_GATEWAY: 203.0.113.1
FLOATING_IP_START: 203.0.113.101
FLOATING_IP_END: 203.0.113.200

build_in_image: http://download.cirros-cloud.net/0.3.3/cirros-0.3.3-x86_64-disk.img
build_in_image_name: cirros-0.3.3-x86_64-disk.img

physical_device: /dev/sdb

internal_interface: "ansible_{{ INTERNAL_INTERFACE }}"
internal_ip: "{{ hostvars[inventory_hostname][internal_interface]['ipv4']['address'] }}"

odl_username: admin
odl_password: admin
odl_api_port: 8080
