
odl-cluster-data {
  bounded-mailbox {
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.MeteredBoundedMailbox"
    mailbox-capacity = 1000
    mailbox-push-timeout-time = 100ms
  }

  metric-capture-enabled = true

  akka {
    loglevel = "INFO"
    loggers = ["akka.event.slf4j.Slf4jLogger"]

    actor {

      provider = "akka.cluster.ClusterActorRefProvider"
      serializers {
                java = "akka.serialization.JavaSerializer"
                proto = "akka.remote.serialization.ProtobufSerializer"
              }

              serialization-bindings {
                  "com.google.protobuf.Message" = proto

              }
    }
    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "{{ hostvars[inventory_hostname]['ansible_' + internal_nic].ipv4.address }}"
        port = 2550
        maximum-frame-size = 419430400
        send-buffer-size = 52428800
        receive-buffer-size = 52428800
      }
    }

    cluster {
      seed-nodes = [
{% for host in groups['odl'] %}
    {% if loop.last %}
                    "akka.tcp://opendaylight-cluster-data@{{ hostvars[host]['ansible_' + internal_nic].ipv4.address }}:2550"
    {% else %}
                    "akka.tcp://opendaylight-cluster-data@{{ hostvars[host]['ansible_' + internal_nic].ipv4.address }}:2550",
    {% endif %}
{% endfor %}
                   ]

      auto-down-unreachable-after = 10s

      roles = [
{% set key = 0 %}
{% for host in groups['odl'] %}
    {% set key = key + 1 %}
    {% if  hostvars[host]['ansible_' + internal_nic].ipv4.address  ==  hostvars[inventory_hostname]['ansible_' + internal_nic].ipv4.address  %}
        "member-{{ key }}"
    {% endif %}
{% endfor %}
      ]

    }
  }
}

odl-cluster-rpc {
  bounded-mailbox {
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.MeteredBoundedMailbox"
    mailbox-capacity = 1000
    mailbox-push-timeout-time = 100ms
  }

  metric-capture-enabled = true

  akka {
    loglevel = "INFO"
    loggers = ["akka.event.slf4j.Slf4jLogger"]

    actor {
      provider = "akka.cluster.ClusterActorRefProvider"

    }
    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "{{ hostvars[inventory_hostname]['ansible_' + internal_nic].ipv4.address }}"
        port = 2551
      }
    }

    cluster {
      seed-nodes = [
{% for host in groups['odl'] %}
    {% if loop.last %}
                    "akka.tcp://odl-cluster-rpc@{{ hostvars[host]['ansible_' + internal_nic].ipv4.address }}:2551"
    {% else %}
                    "akka.tcp://odl-cluster-rpc@{{ hostvars[host]['ansible_' + internal_nic].ipv4.address }}:2551",
    {% endif %}
{% endfor %}
                   ]

      auto-down-unreachable-after = 10s
    }
  }
}
